# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "http://speechkitchen.org/boxes/mario-kaldi.box"
  config.ssh.forward_x11 = true

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #

  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
config.vm.provider :virtualbox do |vb|
# this overrides audio to force controller, but differs by OS
# this one is for linux ("pulse")
#    vb.customize ["modifyvm", :id, '--audio', 'pulse', '--audiocontroller', 'ac97'] # choices: hda sb16 ac97
    vb.cpus = 4
    vb.memory = 14369 # 14 GB
end

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
     #sudo apt-get update -y
     # (up-to-date as of 4/20/2015)

     # er1k's audio and microphone-in-kaldi list
     #sudo apt-get install -y --no-install-recommends alsa-utils linux-headers-generic build-essential \
     #pulseaudio gawk libportaudio-dev libportaudio0 libportaudio2 libportaudiocpp0 \
     #alsa-base alsa-utils libasound2 libasound-dev
     #(baked into this machine)

     # Add user to audio group. Otherwise aplay -l finds no hardware(!)
     sudo usermod -a -G audio vagrant

     # Stuff needed by Kaldi
     # (baked into this machine)

     # Florian's Kaldi install recipe
     # (baked into this machine)

     # fix missing dependency
     cd /kaldi-trunk/src   && sed -Ei 's/lm: base util/lm: base util fstext/' Makefile

     # Kaldi stuff

     # uncomment the next 2 lines to compress kaldi executables
     # (this makes more sense if we later plan to export this VM)
     # 
     #cd /kaldi-trunk/src   && find *bin \( -executable -type f \) -print0 | xargs -0 -n 1 -P `lscpu -p|grep -v "#"|wc -l` gzexe
     #cd /kaldi-trunk/src   && find *bin -name "*~" -exec rm {} \;

     chown -R vagrant:vagrant /kaldi-trunk 
     ln -fs /kaldi-trunk /home/vagrant/kaldi-trunk
     chown vagrant:vagrant /home/vagrant/kaldi-trunk

     # TEDLIUM SPECIFICS

     # language model - link /kaldi-trunk/egs/tedlium/s5/db -> /vagrant/db
     rm -rf /kaldi-trunk/egs/tedlium/s5/db
     ln -fs /vagrant/db /kaldi-trunk/egs/tedlium/s5

     # working directory - make this on the host (faster)
     if [ ! -e /vagrant/exp ];
     then
       mkdir /vagrant/exp
       ln -s /vagrant/exp /kaldi-trunk/egs/tedlium/s5
     fi

     # refresh run scripts from local copy (allows us to push 'updated' version)
     cp -f /vagrant/run.sh /kaldi-trunk/egs/tedlium/s5
     cp -f /vagrant/cmd.sh /kaldi-trunk/egs/tedlium/s5

     # training audio
     #
     # lm_build folder - modularized in TEDLIUM now. Let users get it via README 

  SHELL
end
